from typing import List

import requests
import logging
import random
import json
import sys
import re
import os

import pandas as pd

logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logger = logging.getLogger(__name__)

PATH_DATA   = os.getenv('PATH_DATA' , './data/UCIPM_Questions_2020_08_19.csv'       )
RASA_URL    = os.getenv('RASA_URL'  , 'http://localhost:5005/webhooks/rest/webhook' )
STAGE       = os.getenv('STAGE'     , 'dev'                                         )


def _read_data() -> List:
    '''Read the data of questions for querying against the chatbot.

    Returns:
        List: List of questions along with correct link(s).
    '''
    df = pd.read_csv(PATH_DATA)

    df['request']   = df['Question'   ].apply(lambda x: x.split('\n')[0]              )
    df['answer' ]   = df['URL'        ].apply(lambda x: [x1.split('?')[0] for x1 in x.split('\n')])
    df              = df[['request', 'answer']]
    
    messages        = df.values.tolist()

    return messages

def _get_results(messages: List) -> List:
    '''Query the list of questions against the chatbot in development environment.

    Args:
        messages (List): List of questions along with correct link(s).

    Returns:
        List: Returns the list of answers generated by the chatbot.
    '''

    SENDER  = random.randint(0, 10000)
    DATA    = {
        'message'   : '', 
        'sender'    : str(SENDER)
    }

    results = []

    logger.info(f'Querying {len(messages)} questions against chatbot...')

    for i, (m, _) in enumerate(messages):

        DATA['message'] = m
        r = requests.post(RASA_URL, json = DATA)

        r = json.loads(r.text)

        assert isinstance(r, list)
        assert len(r) >= 3
        
        if STAGE == 'dev':
            r = r[2]
        else:
            r = r[1]

        assert 'custom' in r
        r = r['custom']

        assert 'data' in r
        r = r['data']

        result = []
        for e in r:
            title   = re.findall("<em>(.*?)</em>"           , e['title'])[0]
            link    = re.findall("href=[\"\'](.*?)[\"\']"   , e['title'])[0]
            result.append((title, link))
        
        results.append(result)

        DATA['message'] = '/intent_affirm'
        r = requests.post(RASA_URL, json = DATA)
        r = json.loads(r.text)

        assert len(r) == 1
        r = r[0]

        assert 'text' in r
        r = r['text']

        assert 'Anything else I can help with?' == r
        if (i+1)%5 == 0:
            logger.info(f'Finished {i+1} questions...')

    logger.info(f'Finished querying all questions for scoring')

    return results

def _get_scores(
    messages: List, 
    results : List
    ) -> List:
    '''Get scores for the messages - in top 1, 3, and 5 from the chatbot.

    Args:
        messages (List): Questions to test.
        results (List): Correspondong results from chatbot.

    Returns:
        List: List of scores in boolean triples (for top 1, 3, and 5 hits correspondingly).
    '''
    scores = []
    for i, r in enumerate(results):
        answers = messages[i][1]
        topn = [False, False, False]
        for i1, r1 in enumerate(r):
            if r1[1].split('?')[0] in answers:
                if i1 == 0:
                    topn[0] = True
                if i1 < 3:
                    topn[1] = True
                topn[2] = True
        scores.append(topn)
    
    return scores

def print_metrics(scores: List) -> None:
    '''Prints out the scores.

    Args:
        scores (List): Score for the questions.
    '''
    top1 = 0
    top3 = 0
    top5 = 0
    for topn in scores:
        if topn[0]: top1 += 1
        if topn[1]: top3 += 1
        if topn[2]: top5 += 1

    logger.info(f'Out of {len(scores)} results, following correct:'  )
    logger.info(f'Top 1: {top1:<3d} ({top1/len(scores) * 100:<.2f}%)')
    logger.info(f'Top 3: {top3:<3d} ({top3/len(scores) * 100:<.2f}%)')
    logger.info(f'Top 5: {top5:<3d} ({top5/len(scores) * 100:<.2f}%)')

def main():

    logger.info(f'RASA ENDPOINT : {RASA_URL}')    
    logger.info(f'DATA PATH     : {PATH_DATA}')    
    logger.info(f'ENVIRONMENT   : {STAGE}')    
    
    messages    = _read_data    ()
    results     = _get_results  (messages)
    scores      = _get_scores   (messages, results)

    print_metrics(scores)


if __name__ == "__main__":
    main()
